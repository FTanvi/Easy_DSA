******************************************************************************
                               C++ 
                        Sigly_Linked_List 
                (Insertion,Deletion,Traversing)

*******************************************************************************

#include <iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    
    Node(int data){
        this->data=data;
        this->next=NULL;
    }
    
    ~Node(){
        int value =this->data;
        if(this->next != NULL){
            delete next;
        }
        this->next=NULL;
    }
};
void insertAthead(Node* &head,int d){
    Node* temp=head;
    Node* node=new Node(d);
    node->next=head;
    head=node;
    return;
}

void print(Node* &head){
    Node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
    return;
}

void insertAtlast(int d,Node* &tail){
    Node* noden=new Node(d);
    tail->next=noden;
    tail=noden;
    return;
}


void insertAtmiddle(Node* &tail,Node* &head,int d,int position){
    if(position==1){
        insertAthead(head,d);
        return;
    }
    
    int cnt=1;
    Node* temp=head;
    while(cnt<position-1){
       temp=temp->next;
       cnt++;
    }
    if(temp==NULL){
        insertAtlast(d,tail);
        return;
    }
    Node* noden=new Node(d);
    noden->next=temp->next;
    temp->next=noden;
    return;
    
}

void deletenode(Node* tail,Node* &head,int position){
    if(position==1){
        Node* temp=head;
        head=head->next;
        temp->next=NULL;
        delete temp;
    }
    else
    {
        Node* crr=head;
        Node* prev=NULL;
        
        int cnt=1;
        while(cnt<position)
        {
            prev=crr;
            crr=crr->next;
            cnt++;
        }
        if (crr->next == NULL) {
			tail = prev;
			return;
		}
        prev->next=crr->next;
        crr->next=NULL;
        delete crr;
        return;
    }
    
}

int main()
{
    Node* node1=new Node(10);
    Node* head=node1;
    Node* tail=node1;
    
    insertAtlast(20,tail);
    print(head);
    
    insertAtlast(30,tail);
    print(head);
    
    insertAtmiddle(tail,head,50,1);
    print(head);

    deletenode(tail,head,4);
    print(head);
    
    cout<<head->data<<endl;
    cout<<tail->data<<endl;
    return 0;
}
