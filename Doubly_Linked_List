/******************************************************************************
                                      C++ 
                              Doubly_Linked_List
                      (Insertion,Deletion,Traversing)
*******************************************************************************/

#include <iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* prev;
    Node* next;
    
    Node(int data){
        this->data=data;
        this->prev=NULL;
        this->next=NULL;
    }
    ~Node(){
        int val=this->data;
        if(this->next!=NULL){
            delete next;
        }
        this->next=NULL;
        cout<<"Memory is relaesed with data : "<<val;
    }
};


void traverse(Node* &head){
    Node* temp= head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}

int getlength(Node* &head){
    Node* temp= head;
    int len=0;
    while(temp!=NULL){
        len++;
        temp=temp->next;
    }
    return len;
}



void insertAthead(Node* &tail, Node* &head, int d) {
    if (head == NULL) {
        Node* temp = new Node(d);
        head = temp;
        tail = temp;
    }
    else {
        Node* temp = new Node(d);
        temp->next = head;
        head->prev = temp;
        head = temp;
    }
}


void insertAttail(Node* head,Node* tail,int d){
    if(tail==NULL){
        Node* temp=new Node(d);
        tail=temp;
        head=temp;
    }
    else{
        Node* temp=new Node(d);
        tail->next=temp;
        temp->prev=tail;
        tail=temp;
    }
}

void insertAtposition(Node* &head,Node* tail,int position , int d){
    if(position==1){
        insertAthead(tail,head,d);
        return;
    }
    
    Node* temp=head;
    int cnt=1;
    while(cnt<position-1){
        temp=temp->next;
        cnt++;
    }
    
    if(temp->next==NULL){
        insertAttail(head,tail,d);
        return;
    }
    
    Node* node2=new Node(d);
    node2->next=temp->next;
    temp->next->prev=node2;
    temp->next=node2;
    node2->prev=temp;
    return;
}

void deletenode(Node* &head,Node* &tail,int position){
    if(position==1){
        Node* temp =head;
        temp->next->prev=NULL;
        head=temp->next;
        temp->next=NULL;
        delete temp;
        if(head->next!=NULL){
            tail=head->next;
        }
    }
    else{
        Node* curr=head;
        Node* prev=NULL;
        
        int cnt=1;
        while(cnt<position){
            prev=curr;
            curr=curr->next;
            cnt++;
        }
        if(curr->next==NULL){
            tail=prev->next;
            return;
        }
        prev->next=curr->next;
        curr->next=NULL;
        delete curr;
        
        
    }
    cout<<endl;
}



int main()
{
    
    Node* head=NULL;
    Node* tail=NULL;
    insertAthead(tail,head,10);
    traverse(head);
    insertAthead(tail,head,20);
    traverse(head);
    
    insertAtposition(head,tail,3,45);
    traverse(head);
    
    deletenode(head,tail,3);
    traverse(head);
    cout<<"head"<<head->data<<endl;
    cout<<"tail"<<tail->data<<endl;
    return 0;
}
